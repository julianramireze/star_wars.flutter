// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/character.dart';
import 'models/planet.dart';
import 'models/starship.dart';
import 'models/vehicle.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 5029412464357566523),
      name: 'PlanetModel',
      lastPropertyId: const IdUid(9, 5134351306106596944),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4687713521830833413),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4511376838143339366),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1563589824100228716),
            name: 'rotationPeriod',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7467089019858994334),
            name: 'orbitalPeriod',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7550726107927975761),
            name: 'diameter',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4850117635136588916),
            name: 'climate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6672201215364537444),
            name: 'terrain',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3156505835040373040),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5134351306106596944),
            name: 'edited',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 17021139603840911),
      name: 'StarShipModel',
      lastPropertyId: const IdUid(11, 7113684096226499391),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 938111804885160917),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 704969056133239769),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6084687360350922944),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1745763825512650070),
            name: 'manufacturer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3412985511169685310),
            name: 'costInCredits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6190278936728864776),
            name: 'length',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 306510155794341802),
            name: 'maxAtmospheringSpeed',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3728892053305483628),
            name: 'cargoCapacity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7796115954487833117),
            name: 'starshipClass',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1921348115193694151),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7113684096226499391),
            name: 'edited',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 165457346473604762),
      name: 'VehicleModel',
      lastPropertyId: const IdUid(11, 8243114012930524924),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2180863114719720901),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2925714954104695395),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1581310610060537486),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8470816216153768662),
            name: 'manufacturer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3663531469395286397),
            name: 'costInCredits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6174726558424536598),
            name: 'length',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8505859935586206216),
            name: 'maxAtmospheringSpeed',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6838012180869485262),
            name: 'cargoCapacity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3211050425174465670),
            name: 'vehicleClass',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5758488770942706943),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8243114012930524924),
            name: 'edited',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4042271801934847532),
      name: 'CharacterModel',
      lastPropertyId: const IdUid(13, 4387576392008665563),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3492199630147212209),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3458009492066944563),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 274079285631867887),
            name: 'height',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6579683338389420328),
            name: 'mass',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4321729915909760401),
            name: 'hairColor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2724260427996074545),
            name: 'eyeColor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2084817128058286601),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2738530086252896910),
            name: 'birthYear',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6793960623915200515),
            name: 'homeWorld',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2256480169743166139),
            name: 'starShips',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7515967706198279785),
            name: 'vehicles',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6357354837937728275),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4387576392008665563),
            name: 'edited',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 4042271801934847532),
      lastIndexId: const IdUid(4, 6143545870394646016),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [6083401270948902473],
      retiredIndexUids: const [
        6501710558174555414,
        2972568445175385928,
        6143545870394646016
      ],
      retiredPropertyUids: const [
        6665598828153135736,
        8222998193293256801,
        3785607953928739981,
        9173974869430258243,
        5164869239025728607,
        3472900133999388713,
        5602785461377512953,
        5968973295505764920,
        3111257433032941676,
        1319998039383327832,
        3481393916830888440,
        5253498485594212765,
        5696355054677523671
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    PlanetModel: EntityDefinition<PlanetModel>(
        model: _entities[0],
        toOneRelations: (PlanetModel object) => [],
        toManyRelations: (PlanetModel object) => {},
        getId: (PlanetModel object) => object.id,
        setId: (PlanetModel object, int id) {
          object.id = id;
        },
        objectToFB: (PlanetModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final climateOffset = fbb.writeString(object.climate);
          final terrainOffset = fbb.writeString(object.terrain);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.rotationPeriod);
          fbb.addInt64(3, object.orbitalPeriod);
          fbb.addInt64(4, object.diameter);
          fbb.addOffset(5, climateOffset);
          fbb.addOffset(6, terrainOffset);
          fbb.addInt64(7, object.created.millisecondsSinceEpoch);
          fbb.addInt64(8, object.edited.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PlanetModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..rotationPeriod =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..orbitalPeriod =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..diameter =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..climate = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..terrain = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..edited = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    StarShipModel: EntityDefinition<StarShipModel>(
        model: _entities[1],
        toOneRelations: (StarShipModel object) => [],
        toManyRelations: (StarShipModel object) => {},
        getId: (StarShipModel object) => object.id,
        setId: (StarShipModel object, int id) {
          object.id = id;
        },
        objectToFB: (StarShipModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final modelOffset = fbb.writeString(object.model);
          final manufacturerOffset = fbb.writeString(object.manufacturer);
          final starshipClassOffset = fbb.writeString(object.starshipClass);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, manufacturerOffset);
          fbb.addInt64(4, object.costInCredits);
          fbb.addFloat64(5, object.length);
          fbb.addInt64(6, object.maxAtmospheringSpeed);
          fbb.addInt64(7, object.cargoCapacity);
          fbb.addOffset(8, starshipClassOffset);
          fbb.addInt64(9, object.created.millisecondsSinceEpoch);
          fbb.addInt64(10, object.edited.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = StarShipModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..model = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..manufacturer = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..costInCredits =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..length =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..maxAtmospheringSpeed =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..cargoCapacity =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..starshipClass = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..edited = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));

          return object;
        }),
    VehicleModel: EntityDefinition<VehicleModel>(
        model: _entities[2],
        toOneRelations: (VehicleModel object) => [],
        toManyRelations: (VehicleModel object) => {},
        getId: (VehicleModel object) => object.id,
        setId: (VehicleModel object, int id) {
          object.id = id;
        },
        objectToFB: (VehicleModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final modelOffset = fbb.writeString(object.model);
          final manufacturerOffset = fbb.writeString(object.manufacturer);
          final vehicleClassOffset = fbb.writeString(object.vehicleClass);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, manufacturerOffset);
          fbb.addInt64(4, object.costInCredits);
          fbb.addFloat64(5, object.length);
          fbb.addInt64(6, object.maxAtmospheringSpeed);
          fbb.addInt64(7, object.cargoCapacity);
          fbb.addOffset(8, vehicleClassOffset);
          fbb.addInt64(9, object.created.millisecondsSinceEpoch);
          fbb.addInt64(10, object.edited.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VehicleModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..model = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..manufacturer = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..costInCredits =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..length =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..maxAtmospheringSpeed =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..cargoCapacity =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..vehicleClass = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..edited = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));

          return object;
        }),
    CharacterModel: EntityDefinition<CharacterModel>(
        model: _entities[3],
        toOneRelations: (CharacterModel object) => [],
        toManyRelations: (CharacterModel object) => {},
        getId: (CharacterModel object) => object.id,
        setId: (CharacterModel object, int id) {
          object.id = id;
        },
        objectToFB: (CharacterModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final hairColorOffset = fbb.writeString(object.hairColor);
          final eyeColorOffset = fbb.writeString(object.eyeColor);
          final genderOffset = fbb.writeString(object.gender);
          final birthYearOffset = fbb.writeString(object.birthYear);
          final homeWorldOffset = fbb.writeString(object.homeWorld);
          final starShipsOffset = fbb.writeList(
              object.starShips.map(fbb.writeString).toList(growable: false));
          final vehiclesOffset = fbb.writeList(
              object.vehicles.map(fbb.writeString).toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.height);
          fbb.addInt64(3, object.mass);
          fbb.addOffset(4, hairColorOffset);
          fbb.addOffset(5, eyeColorOffset);
          fbb.addOffset(6, genderOffset);
          fbb.addOffset(7, birthYearOffset);
          fbb.addOffset(8, homeWorldOffset);
          fbb.addOffset(9, starShipsOffset);
          fbb.addOffset(10, vehiclesOffset);
          fbb.addInt64(11, object.created.millisecondsSinceEpoch);
          fbb.addInt64(12, object.edited.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CharacterModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..height =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..mass = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..hairColor = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..eyeColor = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..gender = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..birthYear = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..homeWorld = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..starShips = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 22, [])
            ..vehicles = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 24, [])
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0))
            ..edited = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [PlanetModel] entity fields to define ObjectBox queries.
class PlanetModel_ {
  /// see [PlanetModel.id]
  static final id =
      QueryIntegerProperty<PlanetModel>(_entities[0].properties[0]);

  /// see [PlanetModel.name]
  static final name =
      QueryStringProperty<PlanetModel>(_entities[0].properties[1]);

  /// see [PlanetModel.rotationPeriod]
  static final rotationPeriod =
      QueryIntegerProperty<PlanetModel>(_entities[0].properties[2]);

  /// see [PlanetModel.orbitalPeriod]
  static final orbitalPeriod =
      QueryIntegerProperty<PlanetModel>(_entities[0].properties[3]);

  /// see [PlanetModel.diameter]
  static final diameter =
      QueryIntegerProperty<PlanetModel>(_entities[0].properties[4]);

  /// see [PlanetModel.climate]
  static final climate =
      QueryStringProperty<PlanetModel>(_entities[0].properties[5]);

  /// see [PlanetModel.terrain]
  static final terrain =
      QueryStringProperty<PlanetModel>(_entities[0].properties[6]);

  /// see [PlanetModel.created]
  static final created =
      QueryIntegerProperty<PlanetModel>(_entities[0].properties[7]);

  /// see [PlanetModel.edited]
  static final edited =
      QueryIntegerProperty<PlanetModel>(_entities[0].properties[8]);
}

/// [StarShipModel] entity fields to define ObjectBox queries.
class StarShipModel_ {
  /// see [StarShipModel.id]
  static final id =
      QueryIntegerProperty<StarShipModel>(_entities[1].properties[0]);

  /// see [StarShipModel.name]
  static final name =
      QueryStringProperty<StarShipModel>(_entities[1].properties[1]);

  /// see [StarShipModel.model]
  static final model =
      QueryStringProperty<StarShipModel>(_entities[1].properties[2]);

  /// see [StarShipModel.manufacturer]
  static final manufacturer =
      QueryStringProperty<StarShipModel>(_entities[1].properties[3]);

  /// see [StarShipModel.costInCredits]
  static final costInCredits =
      QueryIntegerProperty<StarShipModel>(_entities[1].properties[4]);

  /// see [StarShipModel.length]
  static final length =
      QueryDoubleProperty<StarShipModel>(_entities[1].properties[5]);

  /// see [StarShipModel.maxAtmospheringSpeed]
  static final maxAtmospheringSpeed =
      QueryIntegerProperty<StarShipModel>(_entities[1].properties[6]);

  /// see [StarShipModel.cargoCapacity]
  static final cargoCapacity =
      QueryIntegerProperty<StarShipModel>(_entities[1].properties[7]);

  /// see [StarShipModel.starshipClass]
  static final starshipClass =
      QueryStringProperty<StarShipModel>(_entities[1].properties[8]);

  /// see [StarShipModel.created]
  static final created =
      QueryIntegerProperty<StarShipModel>(_entities[1].properties[9]);

  /// see [StarShipModel.edited]
  static final edited =
      QueryIntegerProperty<StarShipModel>(_entities[1].properties[10]);
}

/// [VehicleModel] entity fields to define ObjectBox queries.
class VehicleModel_ {
  /// see [VehicleModel.id]
  static final id =
      QueryIntegerProperty<VehicleModel>(_entities[2].properties[0]);

  /// see [VehicleModel.name]
  static final name =
      QueryStringProperty<VehicleModel>(_entities[2].properties[1]);

  /// see [VehicleModel.model]
  static final model =
      QueryStringProperty<VehicleModel>(_entities[2].properties[2]);

  /// see [VehicleModel.manufacturer]
  static final manufacturer =
      QueryStringProperty<VehicleModel>(_entities[2].properties[3]);

  /// see [VehicleModel.costInCredits]
  static final costInCredits =
      QueryIntegerProperty<VehicleModel>(_entities[2].properties[4]);

  /// see [VehicleModel.length]
  static final length =
      QueryDoubleProperty<VehicleModel>(_entities[2].properties[5]);

  /// see [VehicleModel.maxAtmospheringSpeed]
  static final maxAtmospheringSpeed =
      QueryIntegerProperty<VehicleModel>(_entities[2].properties[6]);

  /// see [VehicleModel.cargoCapacity]
  static final cargoCapacity =
      QueryIntegerProperty<VehicleModel>(_entities[2].properties[7]);

  /// see [VehicleModel.vehicleClass]
  static final vehicleClass =
      QueryStringProperty<VehicleModel>(_entities[2].properties[8]);

  /// see [VehicleModel.created]
  static final created =
      QueryIntegerProperty<VehicleModel>(_entities[2].properties[9]);

  /// see [VehicleModel.edited]
  static final edited =
      QueryIntegerProperty<VehicleModel>(_entities[2].properties[10]);
}

/// [CharacterModel] entity fields to define ObjectBox queries.
class CharacterModel_ {
  /// see [CharacterModel.id]
  static final id =
      QueryIntegerProperty<CharacterModel>(_entities[3].properties[0]);

  /// see [CharacterModel.name]
  static final name =
      QueryStringProperty<CharacterModel>(_entities[3].properties[1]);

  /// see [CharacterModel.height]
  static final height =
      QueryIntegerProperty<CharacterModel>(_entities[3].properties[2]);

  /// see [CharacterModel.mass]
  static final mass =
      QueryIntegerProperty<CharacterModel>(_entities[3].properties[3]);

  /// see [CharacterModel.hairColor]
  static final hairColor =
      QueryStringProperty<CharacterModel>(_entities[3].properties[4]);

  /// see [CharacterModel.eyeColor]
  static final eyeColor =
      QueryStringProperty<CharacterModel>(_entities[3].properties[5]);

  /// see [CharacterModel.gender]
  static final gender =
      QueryStringProperty<CharacterModel>(_entities[3].properties[6]);

  /// see [CharacterModel.birthYear]
  static final birthYear =
      QueryStringProperty<CharacterModel>(_entities[3].properties[7]);

  /// see [CharacterModel.homeWorld]
  static final homeWorld =
      QueryStringProperty<CharacterModel>(_entities[3].properties[8]);

  /// see [CharacterModel.starShips]
  static final starShips =
      QueryStringVectorProperty<CharacterModel>(_entities[3].properties[9]);

  /// see [CharacterModel.vehicles]
  static final vehicles =
      QueryStringVectorProperty<CharacterModel>(_entities[3].properties[10]);

  /// see [CharacterModel.created]
  static final created =
      QueryIntegerProperty<CharacterModel>(_entities[3].properties[11]);

  /// see [CharacterModel.edited]
  static final edited =
      QueryIntegerProperty<CharacterModel>(_entities[3].properties[12]);
}
